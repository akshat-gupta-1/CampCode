generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id        String   @id @default(cuid())
//   email     String   @unique
//   username  String   @unique
//   password  String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Problem       Problem[]
  Revision      Revision?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Difficulty {
  Easy
  Medium
  Hard
}

enum Status {
  Yes
  No
}

model Tag {
  id       Int       @id @unique @default(autoincrement())
  name     String    @unique
  problems Problem[]

  @@index([name])
  @@index([id])
}

model Problem {
  id         String     @id @unique @default(cuid())
  number     Int
  title      String     @unique
  tags       Tag[]
  difficulty Difficulty
  Solved     Solved[]
  Revision   Revision?
  user       User       @relation(fields: [userId], references: [id])
  userId     String
  notes      String?    @db.VarChar(1500)

  @@index([id])
}

model Solved {
  id         String   @id @unique @default(cuid())
  timeTaken  Int
  dateSolved DateTime
  problem    Problem? @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId  String?
  Completed  Status?
}

model Revision {
  id        String  @id @unique @default(cuid())
  Problem   Problem @relation(fields: [problemId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique
  problemId String  @unique
}
